vt <- t(matrix(t(VTj[active,c("y1","x1","y2","x2")]),ncol=2,byrow=TRUE))
# v/sapply ne marche pas avec mpfr
for(i in 2:ncopies){ # s'affranchir de cette boucle ?
Znew[,start+i] <- Dtil[i-1]*tau + Ctil[i-1] # est-ce utile de calculer Znew ?
vtnew <- array(NA, dim=dim(vt))
for(m in 1:ncol(vt)){
munew <- vt[1,m] + vt[2,m]*(C-Ctil[i-1]*D/Dtil[i-1])
sigmanew <- vt[2,m]*D/Dtil[i-1]
vtnew[,m] <- c(munew,sigmanew)
}
VTnew[active,c("y1","x1","y2","x2"),start+i] <- matrix(vtnew, ncol=4, byrow=TRUE)
VTnew[active,c("a","b","pair","type","include"),start+i] <- VTj[active,c("a","b","pair","type","include")]
}
}
start <- start+ncopies
}
VTall <- VTnew
Z[1:k,] <- Znew
#
weight  <- array(0, dim=c(n,N))
}
}
y <- dat[,1]
print(confint(lm(y~1)))
# ewcdf <- spatstat::ewcdf
mu <- sapply(1:N, function(j){
vt <- VTall[,,j]
vt[vt[,"include"]==1,][1,"y1"]
}
)
sims <- sample(mu, N, prob=WT, replace=TRUE)
summary(sims)
print(quantile(sims,c(2.5,97.5)/100))
plot(density(mu, weights=WT))
source('D:/Work/Fiducial/R/particle_01_functions.R')
## fonction qui retourne m et M
## arguments : (VTsum, sigma_re), (L[1:k], U[1:k])
findSupport <- findSupport # attention il y a un moins par rapport à la fction précédente (je ne sais plus pourquoi)
#library(rgr)
set.seed(666)
options(error=browser)
dat <- rbind(c(1.624 ,1.625), c(2.209,2.210), c(2.097,2.098), c(0.558,0.559), c(-0.335,-0.334), c(-0.971,-0.970), c(-1.650,-1.649), c(-2.338,-2.337), c(-3.290,-3.289), c(-4.291,-4.290), c(2.862 ,2.863), c(2.023,2.024), c(-2.336,-2.335), c(-0.613,-0.612), c(-0.907,-0.906), c(0.354,0.355))
y <- seq(1,20, by=2) #sort(round(rnorm(n),3))
dat <- cbind(y,y+0.05)
n <- nrow(dat)
X <- FE <-  t(t(rep(1,n)))
V <- diag(n)
Y  <-  dat
L <- Y[,1]
U <- Y[,2]
Dim <- 2
N <- nsims <- 250
# initial sample
Z <- matrix(rnorm(n*N), ncol=N)
weight  <- matrix(0, nrow=n, ncol=N)
A <- V %*% Z # A=A[[j]] is the matrix (V_1 Z_1 ... V_re Z_re) with V_re=1
# ici A[[j]] est une seulement colonne et on les empile en colonnes par simulation : A="cbind(A[[1:N]]
#A <- matrix(A, ncol=1)
C1 <- K_start <- c(1,2)
Z[-C1,] <- 0
# maintenant on calcule les sommets de Q1 dans V
b <- UL <- c(U,-L)
h <- function(M){
#M <- as.matrix(M) # quand M colonne - donc uniquement quand re=1
#   AA <- cbind(rbind(FE,-FE), rbind(M,-M))
#   #
#   a1 <- AA[c(K_start,K_start+n),]
#   b1 <- b[c(K_start,K_start+n)]
#   makeH(a1,b1)
D11 <- newD(list(
a=L[K_start[1]],
b=M[K_start[1],1],
pair=1,
type=0, # low
include=1)
)
D12 <- newD(list(
a=U[K_start[1]],
b=M[K_start[1],1], # must be equal  to D11
pair=1,
type=1,
include=1)
)
D21 <- newD(list(
a=L[K_start[2]],
b=M[K_start[2],1],
pair=2,
type=0,
include=1)
)
D22 <- newD(list(
a=U[K_start[2]],
b=M[K_start[2],1],
pair=2,
type=1,
include=1)
)
#
D11["x1"] <- D21["x1"] <- intersect(D11,D21)
D11["x2"] <- D22["x1"] <- intersect(D11,D22)
D12["x1"] <- D21["x2"] <- intersect(D12,D21)
D12["x2"] <- D22["x2"] <- intersect(D12,D22)
# particle
part <- rbind(D11,D12,D21,D22)
part[, c("y1", "y2")] <-  vertices(part)
part
}
j <- 1
h(as.matrix(A[,j]))
VTall <- VT0 <- vapply(1:N, function(j) h(as.matrix(A[,j])), FUN.VALUE=array(0, dim=c(2*Dim,9)))
str(VTall)
#VTall <- lapply(1:N, function(j) h(as.matrix(A[,j])))
#str(VTall)
ESS <- rep(NA,n)
# sampling k=3, ..., n
for(k in 3:n){
Z1 <- FE[k,]
VTall_new <- array(NA, dim=c(2*k, 9, N))
for(j in 1:N){
VTj <- VTall[,,j]
active <- which(VTj[,"include"]==1)
sigma_re <- c(VTj[active, c("x1","x2")])
VTsum <-  Z1*c(VTj[active,c("y1","y2")])
mM <- findSupport(VTsum, sigma_re, L[k], U[k], L[1:(k-1)], U[1:(k-1)])
# # test
# plot(VTj[2,],VTj[1,], type="p")
# abline(a=L[1], b=-Z[1,j]) # mu = b - z sigma
# abline(a=U[1], b=-Z[1,j]) # mu = b - z sigma
# abline(a=L[2], b=-Z[2,j]) # mu = b - z sigma
# abline(a=U[2], b=-Z[2,j]) # mu = b - z sigma
# abline(a=L[3], b=-mM[1], col="green") # mu = b - z sigma
# abline(a=U[3], b=-mM[2], col="green") # mu = b - z sigma
# sample z3
y <- atan(mM[2]) # atan(mM[2])/pi+.5
x <- atan(mM[1]) # atan(mM[1])/pi+.5
u <- runif(1, x, y) #runif(1, x, y)
ZZ <- Z[k,j] <- tan(u)  # tan(pi*(u-.5))
wt <- weight[k,j] <- (-ZZ^2/2)+log(1+ZZ^2)+log(y-x) # -log(pi) useless constant
# new polygon
D31 <- newD(list(
a=L[k],
b=ZZ,
pair=k,
type=0)
)
D32 <- newD(list(
a=U[k],
b=ZZ,
pair=k,
type=1
))
VTj_update <- findVert(VTj, D31)
if(all(VTj_update[,"include"]==0)) stop("all inactive1")
VTj_update <- VTall_new[,,j] <- findVert(VTj_update, D32)
if(all(VTj_update[,"include"]==0)) stop("all inactive2")
# # test
# plot(VTj_update[2,],VTj_update[1,], type="p", col="red", pch=19)
# abline(a=L[1], b=-Z[1,j])
# abline(a=U[1], b=-Z[1,j])
# abline(a=L[2], b=-Z[2,j])
# abline(a=U[2], b=-Z[2,j])
# abline(a=L[3], b=-Z[3,j], col="red")
# abline(a=U[3], b=-Z[3,j], col="red")
}
VTall_prev <- VTall
VTall <- VTall_new
dimnames(VTall)[2] <- dimnames(VTall_prev)[2]
WT <- apply(weight,2,cumsum)  #only last re is restricted
WT <- WT[nrow(WT),]
if(sum(WT)==-Inf){
stop("Error: possible underflow")
}
WT <- exp(WT)/sum(exp(WT))
ESS[k] <- 1/crossprod(WT)
print(ESS[k])
### alteration - uniquement les actifs
if(ESS[k] < .4*N && k<n){
Nsons <- rmultinom(1, N, WT)[,1]
Zt <- Z[1:k,]
Znew <- array(NA, dim=c(k,N))
VTnew <- array(0, dim=c(2*k, 9, N))
dimnames(VTnew)[2] <- dimnames(VTall)[2]
start <- 0
for(j in which(Nsons!=0)){
ncopies <- Nsons[j]
VTj <- VTall[,,j]
active <- VTj[,"include"]==1
VTnew[active,,start+1] <- VTj[active,]
VTnew[active,c("a","b","pair","type","include"),start+1] <- VTj[active,c("a","b","pair","type","include")]
Znew[,start+1] <- Zt[,j]
if(ncopies>1){
C <- mean(Zt[,j])
D <- sqrt(crossprod(Zt[,j]-C)[1,1])
tau <- (Zt[,j]-C)/D
Ctil <- rnorm(ncopies-1, 0, 1)
Dtil <- sqrt(rchisq(ncopies-1, k-1))
vt <- t(matrix(t(VTj[active,c("y1","x1","y2","x2")]),ncol=2,byrow=TRUE))
# v/sapply ne marche pas avec mpfr
for(i in 2:ncopies){ # s'affranchir de cette boucle ?
Znew[,start+i] <- Dtil[i-1]*tau + Ctil[i-1] # est-ce utile de calculer Znew ?
vtnew <- array(NA, dim=dim(vt))
for(m in 1:ncol(vt)){
munew <- vt[1,m] + vt[2,m]*(C-Ctil[i-1]*D/Dtil[i-1])
sigmanew <- vt[2,m]*D/Dtil[i-1]
vtnew[,m] <- c(munew,sigmanew)
}
VTnew[active,c("y1","x1","y2","x2"),start+i] <- matrix(vtnew, ncol=4, byrow=TRUE)
VTnew[active,c("a","b","pair","type","include"),start+i] <- VTj[active,c("a","b","pair","type","include")]
}
}
start <- start+ncopies
}
VTall <- VTnew
Z[1:k,] <- Znew
#
weight  <- array(0, dim=c(n,N))
}
}
y <- dat[,1]
print(confint(lm(y~1)))
# ewcdf <- spatstat::ewcdf
mu <- sapply(1:N, function(j){
vt <- VTall[,,j]
vt[vt[,"include"]==1,][1,"y1"]
}
)
sims <- sample(mu, N, prob=WT, replace=TRUE)
summary(sims)
print(quantile(sims,c(2.5,97.5)/100))
plot(density(mu, weights=WT))
source('D:/Work/Fiducial/R/particle_01_functions.R')
## fonction qui retourne m et M
## arguments : (VTsum, sigma_re), (L[1:k], U[1:k])
findSupport <- findSupport # attention il y a un moins par rapport à la fction précédente (je ne sais plus pourquoi)
#library(rgr)
set.seed(666)
options(error=browser)
dat <- rbind(c(1.624 ,1.625), c(2.209,2.210), c(2.097,2.098), c(0.558,0.559), c(-0.335,-0.334), c(-0.971,-0.970), c(-1.650,-1.649), c(-2.338,-2.337), c(-3.290,-3.289), c(-4.291,-4.290), c(2.862 ,2.863), c(2.023,2.024), c(-2.336,-2.335), c(-0.613,-0.612), c(-0.907,-0.906), c(0.354,0.355))
y <- seq(1,20, by=2) #sort(round(rnorm(n),3))
dat <- cbind(y,y+0.05)
n <- nrow(dat)
X <- FE <-  t(t(rep(1,n)))
V <- diag(n)
Y  <-  dat
L <- Y[,1]
U <- Y[,2]
Dim <- 2
N <- nsims <- 1500
# initial sample
Z <- matrix(rnorm(n*N), ncol=N)
weight  <- matrix(0, nrow=n, ncol=N)
A <- V %*% Z # A=A[[j]] is the matrix (V_1 Z_1 ... V_re Z_re) with V_re=1
# ici A[[j]] est une seulement colonne et on les empile en colonnes par simulation : A="cbind(A[[1:N]]
#A <- matrix(A, ncol=1)
C1 <- K_start <- c(1,2)
Z[-C1,] <- 0
# maintenant on calcule les sommets de Q1 dans V
b <- UL <- c(U,-L)
h <- function(M){
#M <- as.matrix(M) # quand M colonne - donc uniquement quand re=1
#   AA <- cbind(rbind(FE,-FE), rbind(M,-M))
#   #
#   a1 <- AA[c(K_start,K_start+n),]
#   b1 <- b[c(K_start,K_start+n)]
#   makeH(a1,b1)
D11 <- newD(list(
a=L[K_start[1]],
b=M[K_start[1],1],
pair=1,
type=0, # low
include=1)
)
D12 <- newD(list(
a=U[K_start[1]],
b=M[K_start[1],1], # must be equal  to D11
pair=1,
type=1,
include=1)
)
D21 <- newD(list(
a=L[K_start[2]],
b=M[K_start[2],1],
pair=2,
type=0,
include=1)
)
D22 <- newD(list(
a=U[K_start[2]],
b=M[K_start[2],1],
pair=2,
type=1,
include=1)
)
#
D11["x1"] <- D21["x1"] <- intersect(D11,D21)
D11["x2"] <- D22["x1"] <- intersect(D11,D22)
D12["x1"] <- D21["x2"] <- intersect(D12,D21)
D12["x2"] <- D22["x2"] <- intersect(D12,D22)
# particle
part <- rbind(D11,D12,D21,D22)
part[, c("y1", "y2")] <-  vertices(part)
part
}
j <- 1
h(as.matrix(A[,j]))
VTall <- VT0 <- vapply(1:N, function(j) h(as.matrix(A[,j])), FUN.VALUE=array(0, dim=c(2*Dim,9)))
str(VTall)
#VTall <- lapply(1:N, function(j) h(as.matrix(A[,j])))
#str(VTall)
ESS <- rep(NA,n)
# sampling k=3, ..., n
for(k in 3:n){
Z1 <- FE[k,]
VTall_new <- array(NA, dim=c(2*k, 9, N))
for(j in 1:N){
VTj <- VTall[,,j]
active <- which(VTj[,"include"]==1)
sigma_re <- c(VTj[active, c("x1","x2")])
VTsum <-  Z1*c(VTj[active,c("y1","y2")])
mM <- findSupport(VTsum, sigma_re, L[k], U[k], L[1:(k-1)], U[1:(k-1)])
# # test
# plot(VTj[2,],VTj[1,], type="p")
# abline(a=L[1], b=-Z[1,j]) # mu = b - z sigma
# abline(a=U[1], b=-Z[1,j]) # mu = b - z sigma
# abline(a=L[2], b=-Z[2,j]) # mu = b - z sigma
# abline(a=U[2], b=-Z[2,j]) # mu = b - z sigma
# abline(a=L[3], b=-mM[1], col="green") # mu = b - z sigma
# abline(a=U[3], b=-mM[2], col="green") # mu = b - z sigma
# sample z3
y <- atan(mM[2]) # atan(mM[2])/pi+.5
x <- atan(mM[1]) # atan(mM[1])/pi+.5
u <- runif(1, x, y) #runif(1, x, y)
ZZ <- Z[k,j] <- tan(u)  # tan(pi*(u-.5))
wt <- weight[k,j] <- (-ZZ^2/2)+log(1+ZZ^2)+log(y-x) # -log(pi) useless constant
# new polygon
D31 <- newD(list(
a=L[k],
b=ZZ,
pair=k,
type=0)
)
D32 <- newD(list(
a=U[k],
b=ZZ,
pair=k,
type=1
))
VTj_update <- findVert(VTj, D31)
if(all(VTj_update[,"include"]==0)) stop("all inactive1")
VTj_update <- VTall_new[,,j] <- findVert(VTj_update, D32)
if(all(VTj_update[,"include"]==0)) stop("all inactive2")
# # test
# plot(VTj_update[2,],VTj_update[1,], type="p", col="red", pch=19)
# abline(a=L[1], b=-Z[1,j])
# abline(a=U[1], b=-Z[1,j])
# abline(a=L[2], b=-Z[2,j])
# abline(a=U[2], b=-Z[2,j])
# abline(a=L[3], b=-Z[3,j], col="red")
# abline(a=U[3], b=-Z[3,j], col="red")
}
VTall_prev <- VTall
VTall <- VTall_new
dimnames(VTall)[2] <- dimnames(VTall_prev)[2]
WT <- apply(weight,2,cumsum)  #only last re is restricted
WT <- WT[nrow(WT),]
if(sum(WT)==-Inf){
stop("Error: possible underflow")
}
WT <- exp(WT)/sum(exp(WT))
ESS[k] <- 1/crossprod(WT)
print(ESS[k])
### alteration - uniquement les actifs
if(ESS[k] < .4*N && k<n){
Nsons <- rmultinom(1, N, WT)[,1]
Zt <- Z[1:k,]
Znew <- array(NA, dim=c(k,N))
VTnew <- array(0, dim=c(2*k, 9, N))
dimnames(VTnew)[2] <- dimnames(VTall)[2]
start <- 0
for(j in which(Nsons!=0)){
ncopies <- Nsons[j]
VTj <- VTall[,,j]
active <- VTj[,"include"]==1
VTnew[active,,start+1] <- VTj[active,]
VTnew[active,c("a","b","pair","type","include"),start+1] <- VTj[active,c("a","b","pair","type","include")]
Znew[,start+1] <- Zt[,j]
if(ncopies>1){
C <- mean(Zt[,j])
D <- sqrt(crossprod(Zt[,j]-C)[1,1])
tau <- (Zt[,j]-C)/D
Ctil <- rnorm(ncopies-1, 0, 1)
Dtil <- sqrt(rchisq(ncopies-1, k-1))
vt <- t(matrix(t(VTj[active,c("y1","x1","y2","x2")]),ncol=2,byrow=TRUE))
# v/sapply ne marche pas avec mpfr
for(i in 2:ncopies){ # s'affranchir de cette boucle ?
Znew[,start+i] <- Dtil[i-1]*tau + Ctil[i-1] # est-ce utile de calculer Znew ?
vtnew <- array(NA, dim=dim(vt))
for(m in 1:ncol(vt)){
munew <- vt[1,m] + vt[2,m]*(C-Ctil[i-1]*D/Dtil[i-1])
sigmanew <- vt[2,m]*D/Dtil[i-1]
vtnew[,m] <- c(munew,sigmanew)
}
VTnew[active,c("y1","x1","y2","x2"),start+i] <- matrix(vtnew, ncol=4, byrow=TRUE)
VTnew[active,c("a","b","pair","type","include"),start+i] <- VTj[active,c("a","b","pair","type","include")]
}
}
start <- start+ncopies
}
VTall <- VTnew
Z[1:k,] <- Znew
#
weight  <- array(0, dim=c(n,N))
}
}
source('D:/Work/Fiducial/R/particle_01_functions.R')
newD(list(a=1))
# init
D11 <- newD(list(
a=1,
b=1,
pair=1,
type=0, # low
include=1)
)
D12 <- newD(list(
a=2,
b=1, # must be equal  to D11
pair=1,
type=1,
include=1)
)
D21 <- newD(list(
a=4,
b=-1,
pair=2,
type=0,
include=1)
)
D22 <- newD(list(
a=5,
b=-1,
pair=2,
type=1,
include=1)
)
D11["x1"] <- D21["x1"] <- intersect(D11,D21)
D11["x2"] <- D22["x1"] <- intersect(D11,D22)
D12["x1"] <- D21["x2"] <- intersect(D12,D21)
D12["x2"] <- D22["x2"] <- intersect(D12,D22)
part <- rbind(D11,D12,D21,D22)
part[, c("y1", "y2")] <-  vertices(part)
# k=3 - pas encore de slope
a <- rnorm(1,4)
D31 <- newD(list(
a=a,
pair=3,
type=0,
include=NA)
)
D32 <- newD(list(
a=a+0.1,
pair=3,
type=1,
include=NA
))
active <- which(part[,"include"]==1)
sigma <- c(part[active, c("x1","x2")])
VTsum <-  c(part[active,c("y1","y2")])
mM <- findSupport(VTsum, sigma, D31["a"], D32["a"])
D31["b"] <- D32["b"] <- runif(1,mM[1],mM[2])
active <- which(part[,"include"]==1)
x <- c(part[active, c("x1","x2")])
y <- c(part[active, c("y1","y2")])
par(tck = 0.02, mgp = c(1.7, 0.3, 0))
plot(x, y, type = "p", pch = 1, col = "black", xlim = range(x), ylim = range(y))
Plot_ConvexHull(x, y, lcolor="green")
abline(a=D31["a"], b=D31["b"])
abline(a=D32["a"], b=D32["b"])
part <- findVert(part, D31)
part <- findVert(part, D32)
active <- which(part[,"include"]==1)
x <- c(part[active, c("x1","x2")])
y <- c(part[active, c("y1","y2")])
points(x, y, type = "p", pch = 19,col="blue")
Plot_ConvexHull(x, y, lcolor="red")
wd <- "C:\\Users\\User\\Pictures\\CyberShot\\18-04-2014\\"
# the folder containing the figures :
fig.path <- wd
# all JPG figures :
figures <- list.files(fig.path, pattern=".JPG", all.files=TRUE)
# resize all figures
for(i in 1:length(figures)){
infile <- paste0(wd,figures[i])
out <-   paste0(wd,"compressed_", figures[i])
comm <- paste("convert -strip -interlace Plane -gaussian-blur 0.05 -quality 30%", infile, out)
shell(comm)
}
wd <- "C:\\Users\\User\\Pictures\\CyberShot\\19-04-2014\\"
# the folder containing the figures :
fig.path <- wd
# all JPG figures :
figures <- list.files(fig.path, pattern=".JPG", all.files=TRUE)
# resize all figures
for(i in 1:length(figures)){
infile <- paste0(wd,figures[i])
out <-   paste0(wd,"compressed_", figures[i])
comm <- paste("convert -strip -interlace Plane -gaussian-blur 0.05 -quality 30%", infile, out)
shell(comm)
}
setwd("D:/Github/stlapblog")
library(poirot)
blogify(".")
